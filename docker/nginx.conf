# 运行用户
user  nginx;

# 启动进程,通常设置成和cpu的数量相等
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# 工作模式及连接数上限
events {
    # 防止在同一个时刻只有一个请求的情况下，出现多个睡眠进程会被唤醒但只能有一个进程可获得请求的尴尬
    accept_mutex on;
    # 同时接受多个新网络连接请求
    multi_accept on;

    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use   epoll;

    #单个后台worker process进程的最大并发链接数
    worker_connections  1024;
}


http {
    #设定mime类型,类型由mime.type文件定义
    include    /etc/nginx/mime.types;
    default_type  application/octet-stream;

    #设定日志格式
    log_format main     '$server_name $remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '$upstream_addr $request_time $upstream_response_time';

    access_log  off;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    #原理是减少了内核层与用户层的上线文切换，特别是在没有数据变化时
    sendfile     on;

    #连接超时时间 单位s
    keepalive_timeout  65;
    #激活延时，提高I/O功能
    #tcp_nodelay     on;

    #开启gzip压缩
    #gzip  on;
    #如果文件小于200个字节，就不用压缩
    #gzip_min_length 1000;
    #gzip_types  text/plain application/xml application/json;

    #设定请求缓冲
    #client_header_buffer_size    128k;
    #large_client_header_buffers  4 128k;

    # 隐藏ngxin版本号，以防某个版本nginx有漏洞时被立即发现
    server_tokens off;

    # server 相关配置
    include /etc/nginx/conf.d/*.conf;
}
